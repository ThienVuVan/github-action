pipeline {

    agent any
    stages{
        //（1）Checkout code from GitHub
        stage("Checkout code from GitHub") {
            steps {
                echo "==========  Checkout code from GitHub Start  =========="
                git branch: "${GITHUB_BRANCH}", url: "${GITHUB_URL}", credentialsId: "${JENKINS_CREDENTIALS}"
                echo "==========  Checkout code from GitHub End    =========="
            }
        }
        //（2）Build Images
        stage("Build Images") {
            steps {
                echo "==========  build images Start  =========="
                script {
                    if ( env.IMAGE_TAG_MANUAL == '' ) {
                        CURRENT_DATE = sh (script: 'date +%Y%m%d%H%M%S',returnStdout: true).trim()
                        env.IMAGE_TAG = "${GITHUB_BRANCH}-${CURRENT_DATE}"
                    }
                    else{
                        env.IMAGE_TAG = env.IMAGE_TAG_MANUAL
                    }
                }
                sh "docker build -t ${DEPLOY_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${IMAGE_NAME}:${IMAGE_TAG} ."
                echo "==========  build images End    =========="
            }
        }
        //（3）Push Images
        stage("Push Images") {
            steps {
                echo "==========  push images Start  =========="
                sh "aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${DEPLOY_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com"
                sh "docker push ${DEPLOY_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${IMAGE_NAME}:${IMAGE_TAG}"
                echo "==========  push images End    =========="
            }
        }
        //（4）Deploy kubernetes namespaces
        stage("Deploy kubernetes namespaces") {
            steps {
                withKubeConfig([credentialsId: "${EKS_CONFIG}", contextName: "${EKS_CONTEXT}" ]) {
                    echo "==========  Deploy kubernetes namespaces Start  =========="
                    sh " envsubst < ./CICD/deployment/lifescience_bff_namespaces.yaml | kubectl apply -f - "
                    echo "==========  Deploy kubernetes namespaces END  =========="
                }
            }
        }
        //（5）Deploy kubernetes configmap
        stage("Deploy kubernetes configmap") {
            steps {
                withKubeConfig([credentialsId: "${EKS_CONFIG}", contextName: "${EKS_CONTEXT}" ]) {
                    echo "==========  Deploy kubernetes configmap Start  =========="
                    sh " envsubst < ./CICD/deployment/lifescience_bff_configmap.yaml | kubectl apply -f - "
                    echo "==========  Deploy kubernetes configmap END  =========="
                }
            }
        }
        //（6）Deploy kubernetes secret
        stage("Deploy kubernetes secret") {
            steps {
                withKubeConfig([credentialsId: "${EKS_CONFIG}", contextName: "${EKS_CONTEXT}" ]) {
                    echo "==========  Deploy kubernetes secret Start  =========="
                    sh " envsubst < ./CICD/deployment/lifescience_bff_secret.yaml | kubectl apply -f - "
                    echo "==========  Deploy kubernetes secret END  =========="
                }
            }
        }
        //（7）Deploy kubernetes deployment
        stage("Deploy kubernetes deployment") {
            steps {
                script {
                    if ( env.NODE_SELECTOR == '' ) {
                        withKubeConfig([credentialsId: "${EKS_CONFIG}", contextName: "${EKS_CONTEXT}" ]) {
                            echo "==========  Deploy kubernetes namespaces Start  =========="
                            sh " envsubst < ./CICD/deployment/lifescience_bff_deploy.yaml | kubectl apply -f - "
                            echo "==========  Deploy kubernetes namespaces END  =========="
                        }
                    }
                    else{
                        withKubeConfig([credentialsId: "${EKS_CONFIG}", contextName: "${EKS_CONTEXT}" ]) {
                            echo "==========  Deploy kubernetes namespaces Start  =========="
                            sh " envsubst < ./CICD/deployment/lifescience_bff_deploy_new.yaml | kubectl apply -f - "
                            echo "==========  Deploy kubernetes namespaces END  =========="
                        }
                    }
                }
            }
        }
        //（8）Deploy kubernetes Service
        stage("Deploy kubernetes Service") {
            steps {
                withKubeConfig([credentialsId: "${EKS_CONFIG}", contextName: "${EKS_CONTEXT}" ]) {
                    echo "==========  Deploy kubernetes Service Start  =========="
                    sh " envsubst < ./CICD/deployment/lifescience_bff_service.yaml | kubectl apply -f - "
                    echo "==========  Deploy kubernetes Service END  =========="
                }
            }
        }
        //（9）Clean Workspace
        stage("Clear out build DIR") {
            steps{
                echo "==========  Build sucess and clear out file Start  =========="
                sh "docker rmi ${DEPLOY_ACCOUNT_ID}.dkr.ecr.ap-northeast-1.amazonaws.com/${IMAGE_NAME}:${IMAGE_TAG}"
                sh "rm -rf *"
                echo "==========  Build sucess and clear out file End  =========="
            }
        }
    }
    post{
        always {
            script{
                println("always")
            }
        }
        success {
            script{
                currentBuild.description += "\n デプロイ完了しました。"
            }
        }
        failure{
            script{
                currentBuild.description += "\n デプロイ失敗しました。"
            }
        }
        aborted {
            script{
                currentBuild.description += "\n デプロイキャンセルしました。"
            }
        }
    }
}